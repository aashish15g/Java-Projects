#BlueJ class context
comment0.target=StudentBoard
comment0.text=\r\n\ \ StudentBoard\ class\ which\ is\ the\ outline\ for\ setting\ up\ the\ board.\r\n\ \ StudentBoard\ class\ implements\ Board\r\n\r\n\ \ @author\ Aashish\ Ganeshkumar\ (906370814)\r\n\ \ @version\ (2022.04.15)\r\n
comment1.params=width\ height
comment1.target=StudentBoard(int,\ int)
comment1.text=\r\n\ Initializes\ a\ newly\ created\ StudentBoard\ object.\r\n\ @param\ width\ Width\ of\ board.\r\n\ @param\ height\ Height\ of\ board.\r\n
comment10.params=
comment10.target=boolean[][]\ getGrid()
comment10.text=\r\n\ Method\ which\ shows\ the\ two\ dimensional\ array\ of\ the\ board\r\n\ @return\ returns\ the\ two\ dimensional\ array\ of\ the\ pieces\ on\ the\ board.\r\n
comment2.params=
comment2.target=int\ getWidth()
comment2.text=\r\n\ Returns\ the\ width\ of\ the\ board\ in\ blocks.\r\n\ @return\ Returns\ width.\r\n
comment3.params=
comment3.target=int\ getHeight()
comment3.text=\r\n\ Returns\ the\ height\ of\ the\ board\ in\ blocks\r\n\ @return\ Returns\ height.\r\n
comment4.params=
comment4.target=int[]\ getColumnHeights()
comment4.text=\r\n\ Returns\ an\ array\ of\ the\ heights\ of\ all\ columns,\ which\ is\r\n\ the\ y\ value\ of\ the\ highest\ block\ +\ 1\ in\ each\ column.\r\n\ The\ height\ is\ 0\ if\ the\ column\ contains\ no\ blocks.\r\n\r\n\ @return\ an\ array\ of\ the\ column\ heights\ for\ all\ columns.\r\n
comment5.params=
comment5.target=int[]\ getBlocksInAllRows()
comment5.text=\r\n\ Returns\ an\ array\ with\ one\ entry\ per\ row\ indicating\ the\ number\ of\ filled\r\n\ blocks\ in\ the\ given\ row.\r\n\r\n\ @return\ An\ array\ representing\ the\ number\ of\ blocks\ filled\ in\ each\ row.\r\n
comment6.params=points
comment6.target=boolean\ hasBlockAt(student.tetris2.Point)
comment6.text=\r\n\ Returns\ true\ if\ the\ given\ block\ is\ filled\ in\ the\ board.\r\n\ Blocks\ outside\ of\ the\ valid\ width/height\ area\r\n\ always\ return\ true.\r\n\r\n\ @param\ points\ The\ location\ to\ check.\r\n\ @return\ True\ if\ there\ is\ a\ block\ at\ the\ specified\ (x,\ y)\ position.\r\n
comment7.params=pieces\ dot
comment7.target=int\ place(student.tetris2.Piece,\ student.tetris2.Point)
comment7.text=\r\n\ Attempts\ to\ add\ the\ body\ of\ a\ piece\ to\ the\ board.\r\n\ Copies\ the\ piece\ blocks\ into\ the\ board\ grid.\r\n\ Returns\ PLACE_OK\ for\ a\ regular\ placement,\ or\ PLACE_ROW_FILLED\r\n\ for\ a\ regular\ placement\ that\ causes\ at\ least\ one\ row\ to\ be\ filled.\r\n\r\n\ Error\ cases\:\r\n\ If\ part\ of\ the\ piece\ would\ fall\ out\ of\ bounds,\ the\ placement\r\n\ does\ not\ change\ the\ board\ at\ all,\ and\ PLACE_OUT_BOUNDS\ is\ returned.\r\n\ If\ the\ placement\ is\ "bad"--interfering\ with\ existing\ blocks\ in\ the\r\n\ grid--then\ the\ placement\ is\ halted\ partially\ complete\ and\ PLACE_BAD\r\n\ is\ returned.\r\n\ @param\ pieces\ Parameter\ that\ gives\ the\ type\ of\ piece.\r\n\ @param\ dot\ Parameter\ that\ gives\ the\ location\ of\ piece.\r\n\ @return\ Returns\ a\ value\ based\ on\ the\ how\ the\ piece\ is\ positioned.\r\n
comment8.params=rows
comment8.target=boolean\ rowFiller(int)
comment8.text=\r\n\ Method\ which\ is\ a\ part\ of\ the\ clearRows\ method.\ Checks\ to\ see\ if\ the\ \r\n\ row\ is\ filled.\r\n\ @param\ rows\ Paramter\ for\ the\ row\ to\ check.\r\n\ @return\ Returns\ true\ when\ the\ row\ is\ filled.\r\n
comment9.params=
comment9.target=boolean\ clearRows()
comment9.text=\r\n\ Method\ which\ gets\ rid\ of\ the\ rows\ that\ are\ already\ filled.\r\n\ @return\ Returns\ true\ when\ the\ row\ is\ cleared.\r\n
numComments=11
